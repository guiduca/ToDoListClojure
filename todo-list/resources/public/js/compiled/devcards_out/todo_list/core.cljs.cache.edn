{:rename-macros {}, :renames {}, :use-macros {html sablono.core, deftest devcards.core, defcard devcards.core}, :excludes #{}, :name todo-list.core, :imports nil, :requires {ui_tasks todo-list.ui_tasks, todo-list.ui_tasks todo-list.ui_tasks, dc devcards.core, devcards.core devcards.core, sab sablono.core, sablono.core sablono.core}, :uses {}, :defs {dispatch! {:protocol-inline nil, :meta {:file "/Users/val/Documents/ToDoListClojure/todo-list/src/todo_list/core.cljs", :line 9, :column 7, :end-line 9, :end-column 16, :arglists (quote ([store action & args])), :doc "Dispatch action to store", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(store action args)], :arglists ([store action & args]), :arglists-meta (nil)}}, :name todo-list.core/dispatch!, :variadic true, :file "/Users/val/Documents/ToDoListClojure/todo-list/src/todo_list/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(store action args)], :arglists ([store action & args]), :arglists-meta (nil)}, :method-params [(store action args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists ([store action & args]), :doc "Dispatch action to store"}, main {:protocol-inline nil, :meta {:file "/Users/val/Documents/ToDoListClojure/todo-list/src/todo_list/core.cljs", :line 35, :column 7, :end-line 35, :end-column 11, :arglists (quote ([]))}, :name todo-list.core/main, :variadic false, :file "/Users/val/Documents/ToDoListClojure/todo-list/src/todo_list/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {dc devcards.core, devcards.core devcards.core, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:path :inspect-data :func :name :title :documentation :tasks :main-obj :details :MyTodoList :list_name :initial-data :todo_list.core :MyComplexToDoList :options :validated :progress :deadline}, :order [:path :func :todo_list.core :MyTodoList :name :documentation :main-obj :initial-data :options :tasks :list_name :inspect-data :MyComplexToDoList :title :progress :deadline :validated :details]}, :doc nil}